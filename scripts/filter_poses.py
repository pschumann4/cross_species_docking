"""
This funciton is used to determine the best and worst poses from a ligand RMSD file.
The best pose is defined as the pose with the lowest ligand RMSD value, and the worst
pose is defined as the pose with the highest ligand RMSD value. The ligand RMSD file
is generated by the ligand_rmsd.py script.
The function will output the best and worst poses for each species (or model)
as a XLSX file.
"""

import os

import pandas as pd
from pandas import ExcelWriter


def best_and_worst_pose():
    """
    Main function
    """
    # Prompt user for the ligand RMSD file
    lig_rmsd_file = input("Enter the file path for the ligand RMSD text file: ")
    # Remove quotes from the file path
    lig_rmsd_file = lig_rmsd_file.replace('"', "")
    # Set the working directory to the directory containing the ligand RMSD file
    os.chdir(os.path.dirname(lig_rmsd_file))
    # Initialize a df to hold the ligand RMSD values, species, and model
    lig_rmsd_df = pd.DataFrame(columns=["lig_rmsd", "species", "model"])
    # Read the ligand RMSD file
    with open(lig_rmsd_file, "r") as f:
        lines = f.readlines()
        lines = [line.split() for line in lines]
        lig_rmsds = [line[1] for line in lines[2:]]
        species = [line[0].split("_")[0] for line in lines[2:]]
        # Find the model number by selecting the number after the word "model"
        model = [line[0].split("model")[1].split(":")[0] for line in lines[2:]]
    # Add the ligand RMSD values to the dataframe
    lig_rmsd_df["lig_rmsd"] = lig_rmsds
    lig_rmsd_df["species"] = species
    lig_rmsd_df["model"] = model
    # For each species in the dataframe, find the best and worst pose
    best_poses = []
    worst_poses = []
    for species in lig_rmsd_df["species"].unique():
        species_df = lig_rmsd_df[lig_rmsd_df["species"] == species]
        best_pose = species_df[species_df["lig_rmsd"] == species_df["lig_rmsd"].min()]
        worst_pose = species_df[species_df["lig_rmsd"] == species_df["lig_rmsd"].max()]
        best_poses.append(best_pose)
        worst_poses.append(worst_pose)
    # Concatenate the best and worst poses into a single df
    best_poses = pd.concat(best_poses)
    worst_poses = pd.concat(worst_poses)
    # Remove the index from the best and worst poses df
    best_poses.reset_index(drop=True, inplace=True)
    worst_poses.reset_index(drop=True, inplace=True)
    # Convert the lig_rmsd column to a float
    best_poses["lig_rmsd"] = best_poses["lig_rmsd"].astype(float)
    worst_poses["lig_rmsd"] = worst_poses["lig_rmsd"].astype(float)
    # Convert the pose column to an integer
    best_poses["model"] = best_poses["model"].astype(int)
    worst_poses["model"] = worst_poses["model"].astype(int)

    # Write the best and worst poses to a XLSX file
    with pd.ExcelWriter("best_and_worst_poses.xlsx") as writer:
        best_poses.to_excel(writer, sheet_name="best_poses")
        worst_poses.to_excel(writer, sheet_name="worst_poses")
    print(
        'DONE! The best and worst poses have been written to "best_and_worst_poses.xlsx".'
    )


if __name__ == "__main__":
    best_and_worst_pose()
